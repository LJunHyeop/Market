logging:
  level:
    org:
      springframework:
        security: debug

spring:
  application:
    name: Market
  config:
    import: optional:file:env/dev-db.env[.properties]
  datasource:
    driver-class-name: ${DEFAULT.DB_DRIVER_NAME}
    url: ${DEFAULT.DB_URL}
    username: ${DEFAULT.DB_USERNAME}
    password: ${DEFAULT.DB_PASSWORD}
#  security:
#    oauth2:
#      client:
#        registration:
#          google:
#            client-id: ${SOCIAL.GOOGLE.CLIENT_ID}
#            client-secret: ${SOCIAL.GOOGLE.SECRET}
#            scope:
#              - email
#              - profile
#          kakao:
#            client-id: ${SOCIAL.KAKAO.CLIENT_ID}
#            client-secret: ${SOCIAL.KAKAO.SECRET}
#            client-authentication-method: client_secret_post # ??????? client-id, client-secret ????.
#            authorization-grant-type: authorization_code # ???? ?? ( ???? > access-token ? ?? ?? )
#            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
#            # redirect_uri: http://localhost:8080/login/oauth2/code/kakao ?? ??.
#            scope:
#              - profile_nickname
#              - profile_image
#            client-name: Kakao
#          naver:
#            client-id: ${SOCIAL.NAVER.CLIENT_ID}
#            client-secret: ${SOCIAL.NAVER.SECRET}
#            client-authentication-method: client_secret_post # ??????? client-id, client-secret ????.
#            authorization-grant-type: authorization_code # ???? ?? ( ???? > access-token ? ?? ?? )
#            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
#            # redirect_uri: http://localhost:8080/login/oauth2/code/kakao ?? ??.
#            scope:
#              - name
#              - email
#              - profile_image
#            client-name: Naver
#        provider:
#          kakao:
#            authorization-uri: https://kauth.kakao.com/oauth/authorize
#            token-uri: https://kauth.kakao.com/oauth/token
#            user-info-uri: https://kapi.kakao.com/v2/user/me
#            user-info-authentication-method: header #??? ??? ??? ? ??? ??? ?? , ???(header, form, query), header ? ???
#            user-name-attribute: id
#          naver:
#            authorization-uri: https://nid.naver.com/oauth2.0/authorize #?? ??? ??? ??? ? ??? URL
#            token-uri: https://nid.naver.com/oauth2.0/token #??? ??? ??? Redirect URI ? ???? (?? ??)? (??? ??)? ???? URI
#            user-info-uri: https://openapi.naver.com/v1/nid/me #??? ??? ???? ??? ???? ??? ??? ???? URI ???.
#            user-name-attribute: response
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate.dialect: org.hibernate.dialect.MySQLDialect
  servlet:
    multipart:
      max-file-size: 5MB
      max-request-size: 30MB

mybatis:
  mapper-locations: mappers/**/*.xml

server:
  port: 8080
  servlet:
    encoding:
      force-response: true
springdoc:
  swagger-ui:
    path: ${SWAGGER_PATH}
    operations-sorter: method
    default-model-expand-depth: 10
  cache:
    disabled: true
  api-docs:
    version: openapi_3_1

file:
  directory: ${DEFAULT.FILE_DIRECTORY}
---
  spring:
    config:
      activate:
        on-profile: prod
    datasource:
      url: ${PROD.DB_URL}
      username: ${PROD.DB_USERNAME}
      password: ${PROD.DB_PASSWORD}
      driver-class-name: org.mariadb.jdbc.Driver
    jpa:
      hibernate:
        ddl-auto: none
  file:
    directory: ${PROD.FILE_DIRECTORY}
#app:
#  jwt:
#    # JWT?? ? ???? ??(???) > ??? ??? ??? ??
#    #secret: DaeguGreenArtAcademyClass502RoomForJavaSpringBootFightingD23sdfsdf23FDSADFSDFDass502RoomForJavaSprinass502RoomForJavaSprin
#    secret: ${JWT_SECRET}
#
#    #front-back ? JWT?? ?? ? ??
#    header-schema-name: authorization
#
#    #??? ??: Bearer ? JWT or OAuth(????? ? ??)? ??
#    token-type: Bearer
#
#    #AT - ????(ms) - 30?
#    # access-token-expiry: 1_800_000
#    # access-token-expiry: 30_000 #30?
#    # access-token-expiry: 60_000 #1?
#    access-token-expiry: 1_296_000_000 #20?
#
#    #RT - ????(ms) - 15?
#    refresh-token-cookie-name: refresh-token
#    refresh-token-expiry: 1_296_000_000
#  oauth2:
#    base-uri: /oauth2/authorization
#    authorization-request-cookie-name: oauth2_auth_request
#    redirect-uri-param-cookie-name: redirect_uri
#    cookie-expiry-seconds: 180
#    authorized-redirect-uris:
#      - http://localhost:3000/oauth/redirect
#      - http://localhost:8080/oauth/redirect
#      - http://192.168.0.144:5121/oauth/redirect
#      - http://112.222.157.156:5121/oauth/redirect
#      - http://192.168.0.144:5121
#
#coolsms:
#  api:
#    key: ${COOLSMS.API_KEY}
#    secret: ${COOLSMS.SECRET_KEY}
#    caller: ${COOLSMS.PHONE_NUMBER}
#
#management:
#  endpoint: #????? (URL)
#    health:
#      show-details: always #/actuator/health? ???? ??? ??
#    shutdown:
#      enabled: true
#
#  endpoints: #?? ????? ??
#    web:
#      exposure:
#        include: "*" #actuator? ?? ?????? ?? ??
#  info: #???????? endpoint??? ?? ??, management??? ??
#    java:
#      enabled: true
#    os:
#      enabled: true
#    env:
#      enabled: true
#
#---
#
#spring:
#  config:
#    activate:
#      on-profile: tdd
#  datasource:
#    url: ${TDD_DB_URL}
#    username: ${TDD_DB_USERNAME}
#    password: ${TDD_DB_PASSWORD}
#    driver-class-name: org.mariadb.jdbc.Driver
#  sql:
#    init:
#      mode: always

